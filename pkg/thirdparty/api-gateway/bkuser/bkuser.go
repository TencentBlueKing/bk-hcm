/*
 * TencentBlueKing is pleased to support the open source community by making
 * 蓝鲸智云 - 混合云管理平台 (BlueKing - Hybrid Cloud Management System) available.
 * Copyright (C) 2022 THL A29 Limited,
 * a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://opensource.org/licenses/MIT
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * We undertake not to change the open source license (MIT license) applicable
 *
 * to the current version of the project delivered to anyone in the future.
 */

package bkuser

import (
	"errors"
	"fmt"
	"net/http"
	"strings"

	"hcm/pkg/cc"
	"hcm/pkg/criteria/constant"
	"hcm/pkg/kit"
	"hcm/pkg/rest"
	"hcm/pkg/rest/client"
	"hcm/pkg/thirdparty/api-gateway/discovery"
	"hcm/pkg/tools/ssl"

	"github.com/patrickmn/go-cache"
	"github.com/prometheus/client_golang/prometheus"
)

// Client is an api-gateway client to request bk-user.
type Client interface {
	BatchLookupVirtualUser(kt *kit.Kit, loginNames []string) (*BatchLookupVirtualUserResult, error)
}

// NewClient initialize a new bkUser client
func NewClient(cfg *cc.ApiGateway, reg prometheus.Registerer) (Client, error) {
	tls := &ssl.TLSConfig{
		InsecureSkipVerify: cfg.TLS.InsecureSkipVerify,
		CertFile:           cfg.TLS.CertFile,
		KeyFile:            cfg.TLS.KeyFile,
		CAFile:             cfg.TLS.CAFile,
		Password:           cfg.TLS.Password,
	}
	cli, err := client.NewClient(tls)
	if err != nil {
		return nil, err
	}

	c := &client.Capability{
		Client: cli,
		Discover: &discovery.Discovery{
			Name:    "bkUser",
			Servers: cfg.Endpoints,
		},
		MetricOpts: client.MetricOption{Register: reg},
	}
	restCli := rest.NewClient(c, "/api/v3")

	agw := &bkUser{
		config:    cfg,
		client:    restCli,
		userCache: cache.New(constant.VirtualUserCacheDuration, constant.VirtualUserCacheCleanupInterval),
	}
	return agw, nil
}

var _ Client = (*bkUser)(nil)

// bkUser is an api-gateway client to request bkUser.
type bkUser struct {
	config *cc.ApiGateway
	// http client instance
	client rest.ClientInterface

	userCache *cache.Cache
}

// BatchLookupVirtualUser ...
func (c *bkUser) BatchLookupVirtualUser(kt *kit.Kit, lookups []string) (*BatchLookupVirtualUserResult,
	error) {

	if len(lookups) <= 0 {
		return nil, errors.New("lookups is empty")
	}

	// get from cache
	res := new(BatchLookupVirtualUserResult)
	missed := false
	for _, lookup := range lookups {
		cacheKey := c.makeCacheKey(kt.TenantID, lookup)
		value, found := c.userCache.Get(cacheKey)
		if !found {
			missed = true
			break
		}

		userItem, ok := value.(VirtualUserItem)
		if !ok {
			missed = true
			break
		}
		res.Data = append(res.Data, userItem)
	}

	if !missed {
		return res, nil
	}

	params := map[string]string{
		"lookups":      strings.Join(lookups, ","),
		"lookup_field": "login_name",
	}

	resp := new(BatchLookupVirtualUserResult)

	header := GetCommonHeaderWithoutUser(kt, c.config)
	err := c.client.Get().
		WithContext(kt.Ctx).
		SubResourcef("/open/tenant/virtual-users/-/lookup/").
		WithHeaders(header).
		WithParams(params).
		Do().
		Into(resp)

	if err != nil {
		return nil, err
	}

	if resp == nil {
		return nil, errors.New("response is nil")
	}

	for _, userItem := range resp.Data {
		cacheKey := c.makeCacheKey(kt.TenantID, userItem.LoginName)
		c.userCache.SetDefault(cacheKey, userItem)
	}

	return resp, nil
}

// makeCacheKey cache key is generated by concatenating tenant_id and login_name with colons.
func (c *bkUser) makeCacheKey(tenantID, loginName string) string {
	return fmt.Sprintf("%s:%s", tenantID, loginName)
}

// GetCommonHeaderWithoutUser get common header without bk_username
func GetCommonHeaderWithoutUser(kt *kit.Kit, cfg *cc.ApiGateway) http.Header {
	header := kt.Header()
	bkAuth := fmt.Sprintf(`{"bk_app_code": "%s", "bk_app_secret": "%s"}`, cfg.AppCode, cfg.AppSecret)
	header.Set(constant.BKGWAuthKey, bkAuth)
	header.Set(constant.RidKey, kt.Rid)
	return header
}
