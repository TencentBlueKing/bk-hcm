// Code generated by MockGen. DO NOT EDIT.
// Source: ../tcloud/interface.go

// Package mocktcloud is a generated GoMock package.
package mocktcloud

import (
	poller "hcm/pkg/adaptor/poller"
	types "hcm/pkg/adaptor/types"
	account "hcm/pkg/adaptor/types/account"
	bill "hcm/pkg/adaptor/types/bill"
	core "hcm/pkg/adaptor/types/core"
	cvm "hcm/pkg/adaptor/types/cvm"
	disk "hcm/pkg/adaptor/types/disk"
	eip "hcm/pkg/adaptor/types/eip"
	image "hcm/pkg/adaptor/types/image"
	instancetype "hcm/pkg/adaptor/types/instance-type"
	region "hcm/pkg/adaptor/types/region"
	routetable "hcm/pkg/adaptor/types/route-table"
	securitygroup "hcm/pkg/adaptor/types/security-group"
	securitygrouprule "hcm/pkg/adaptor/types/security-group-rule"
	adtysubnet "hcm/pkg/adaptor/types/subnet"
	zone "hcm/pkg/adaptor/types/zone"
	cloud "hcm/pkg/api/core/cloud"
	kit "hcm/pkg/kit"
	reflect "reflect"

	v20180709 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/billing/v20180709"
	v20190116 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cam/v20190116"
	v20170312 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/vpc/v20170312"
	gomock "go.uber.org/mock/gomock"
)

// MockTCloud is a mock of TCloud interface.
type MockTCloud struct {
	ctrl     *gomock.Controller
	recorder *MockTCloudMockRecorder
}

// MockTCloudMockRecorder is the mock recorder for MockTCloud.
type MockTCloudMockRecorder struct {
	mock *MockTCloud
}

// NewMockTCloud creates a new mock instance.
func NewMockTCloud(ctrl *gomock.Controller) *MockTCloud {
	mock := &MockTCloud{ctrl: ctrl}
	mock.recorder = &MockTCloudMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTCloud) EXPECT() *MockTCloudMockRecorder {
	return m.recorder
}

// AssociateEip mocks base method.
func (m *MockTCloud) AssociateEip(kt *kit.Kit, opt *eip.TCloudEipAssociateOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateEip", kt, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociateEip indicates an expected call of AssociateEip.
func (mr *MockTCloudMockRecorder) AssociateEip(kt, opt interface{}) *TCloudAssociateEipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateEip", reflect.TypeOf((*MockTCloud)(nil).AssociateEip), kt, opt)
	return &TCloudAssociateEipCall{Call: call}
}

// TCloudAssociateEipCall wrap *gomock.Call
type TCloudAssociateEipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudAssociateEipCall) Return(arg0 error) *TCloudAssociateEipCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudAssociateEipCall) Do(f func(*kit.Kit, *eip.TCloudEipAssociateOption) error) *TCloudAssociateEipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudAssociateEipCall) DoAndReturn(f func(*kit.Kit, *eip.TCloudEipAssociateOption) error) *TCloudAssociateEipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AttachDisk mocks base method.
func (m *MockTCloud) AttachDisk(kt *kit.Kit, opt *disk.TCloudDiskAttachOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachDisk", kt, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachDisk indicates an expected call of AttachDisk.
func (mr *MockTCloudMockRecorder) AttachDisk(kt, opt interface{}) *TCloudAttachDiskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachDisk", reflect.TypeOf((*MockTCloud)(nil).AttachDisk), kt, opt)
	return &TCloudAttachDiskCall{Call: call}
}

// TCloudAttachDiskCall wrap *gomock.Call
type TCloudAttachDiskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudAttachDiskCall) Return(arg0 error) *TCloudAttachDiskCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudAttachDiskCall) Do(f func(*kit.Kit, *disk.TCloudDiskAttachOption) error) *TCloudAttachDiskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudAttachDiskCall) DoAndReturn(f func(*kit.Kit, *disk.TCloudDiskAttachOption) error) *TCloudAttachDiskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CountAccount mocks base method.
func (m *MockTCloud) CountAccount(kt *kit.Kit) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAccount", kt)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAccount indicates an expected call of CountAccount.
func (mr *MockTCloudMockRecorder) CountAccount(kt interface{}) *TCloudCountAccountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAccount", reflect.TypeOf((*MockTCloud)(nil).CountAccount), kt)
	return &TCloudCountAccountCall{Call: call}
}

// TCloudCountAccountCall wrap *gomock.Call
type TCloudCountAccountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudCountAccountCall) Return(arg0 int32, arg1 error) *TCloudCountAccountCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudCountAccountCall) Do(f func(*kit.Kit) (int32, error)) *TCloudCountAccountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudCountAccountCall) DoAndReturn(f func(*kit.Kit) (int32, error)) *TCloudCountAccountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CountCvm mocks base method.
func (m *MockTCloud) CountCvm(kt *kit.Kit, region string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCvm", kt, region)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCvm indicates an expected call of CountCvm.
func (mr *MockTCloudMockRecorder) CountCvm(kt, region interface{}) *TCloudCountCvmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCvm", reflect.TypeOf((*MockTCloud)(nil).CountCvm), kt, region)
	return &TCloudCountCvmCall{Call: call}
}

// TCloudCountCvmCall wrap *gomock.Call
type TCloudCountCvmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudCountCvmCall) Return(arg0 int32, arg1 error) *TCloudCountCvmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudCountCvmCall) Do(f func(*kit.Kit, string) (int32, error)) *TCloudCountCvmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudCountCvmCall) DoAndReturn(f func(*kit.Kit, string) (int32, error)) *TCloudCountCvmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CountDisk mocks base method.
func (m *MockTCloud) CountDisk(kt *kit.Kit, region string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDisk", kt, region)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDisk indicates an expected call of CountDisk.
func (mr *MockTCloudMockRecorder) CountDisk(kt, region interface{}) *TCloudCountDiskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDisk", reflect.TypeOf((*MockTCloud)(nil).CountDisk), kt, region)
	return &TCloudCountDiskCall{Call: call}
}

// TCloudCountDiskCall wrap *gomock.Call
type TCloudCountDiskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudCountDiskCall) Return(arg0 int32, arg1 error) *TCloudCountDiskCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudCountDiskCall) Do(f func(*kit.Kit, string) (int32, error)) *TCloudCountDiskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudCountDiskCall) DoAndReturn(f func(*kit.Kit, string) (int32, error)) *TCloudCountDiskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CountEip mocks base method.
func (m *MockTCloud) CountEip(kt *kit.Kit, region string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEip", kt, region)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountEip indicates an expected call of CountEip.
func (mr *MockTCloudMockRecorder) CountEip(kt, region interface{}) *TCloudCountEipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEip", reflect.TypeOf((*MockTCloud)(nil).CountEip), kt, region)
	return &TCloudCountEipCall{Call: call}
}

// TCloudCountEipCall wrap *gomock.Call
type TCloudCountEipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudCountEipCall) Return(arg0 int32, arg1 error) *TCloudCountEipCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudCountEipCall) Do(f func(*kit.Kit, string) (int32, error)) *TCloudCountEipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudCountEipCall) DoAndReturn(f func(*kit.Kit, string) (int32, error)) *TCloudCountEipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CountRouteTable mocks base method.
func (m *MockTCloud) CountRouteTable(kt *kit.Kit, region string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRouteTable", kt, region)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRouteTable indicates an expected call of CountRouteTable.
func (mr *MockTCloudMockRecorder) CountRouteTable(kt, region interface{}) *TCloudCountRouteTableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRouteTable", reflect.TypeOf((*MockTCloud)(nil).CountRouteTable), kt, region)
	return &TCloudCountRouteTableCall{Call: call}
}

// TCloudCountRouteTableCall wrap *gomock.Call
type TCloudCountRouteTableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudCountRouteTableCall) Return(arg0 int32, arg1 error) *TCloudCountRouteTableCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudCountRouteTableCall) Do(f func(*kit.Kit, string) (int32, error)) *TCloudCountRouteTableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudCountRouteTableCall) DoAndReturn(f func(*kit.Kit, string) (int32, error)) *TCloudCountRouteTableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CountSecurityGroup mocks base method.
func (m *MockTCloud) CountSecurityGroup(kt *kit.Kit, region string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSecurityGroup", kt, region)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSecurityGroup indicates an expected call of CountSecurityGroup.
func (mr *MockTCloudMockRecorder) CountSecurityGroup(kt, region interface{}) *TCloudCountSecurityGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSecurityGroup", reflect.TypeOf((*MockTCloud)(nil).CountSecurityGroup), kt, region)
	return &TCloudCountSecurityGroupCall{Call: call}
}

// TCloudCountSecurityGroupCall wrap *gomock.Call
type TCloudCountSecurityGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudCountSecurityGroupCall) Return(arg0 int32, arg1 error) *TCloudCountSecurityGroupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudCountSecurityGroupCall) Do(f func(*kit.Kit, string) (int32, error)) *TCloudCountSecurityGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudCountSecurityGroupCall) DoAndReturn(f func(*kit.Kit, string) (int32, error)) *TCloudCountSecurityGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CountSubnet mocks base method.
func (m *MockTCloud) CountSubnet(kt *kit.Kit, region string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSubnet", kt, region)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSubnet indicates an expected call of CountSubnet.
func (mr *MockTCloudMockRecorder) CountSubnet(kt, region interface{}) *TCloudCountSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSubnet", reflect.TypeOf((*MockTCloud)(nil).CountSubnet), kt, region)
	return &TCloudCountSubnetCall{Call: call}
}

// TCloudCountSubnetCall wrap *gomock.Call
type TCloudCountSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudCountSubnetCall) Return(arg0 int32, arg1 error) *TCloudCountSubnetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudCountSubnetCall) Do(f func(*kit.Kit, string) (int32, error)) *TCloudCountSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudCountSubnetCall) DoAndReturn(f func(*kit.Kit, string) (int32, error)) *TCloudCountSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CountVpc mocks base method.
func (m *MockTCloud) CountVpc(kt *kit.Kit, region string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountVpc", kt, region)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountVpc indicates an expected call of CountVpc.
func (mr *MockTCloudMockRecorder) CountVpc(kt, region interface{}) *TCloudCountVpcCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountVpc", reflect.TypeOf((*MockTCloud)(nil).CountVpc), kt, region)
	return &TCloudCountVpcCall{Call: call}
}

// TCloudCountVpcCall wrap *gomock.Call
type TCloudCountVpcCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudCountVpcCall) Return(arg0 int32, arg1 error) *TCloudCountVpcCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudCountVpcCall) Do(f func(*kit.Kit, string) (int32, error)) *TCloudCountVpcCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudCountVpcCall) DoAndReturn(f func(*kit.Kit, string) (int32, error)) *TCloudCountVpcCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateCvm mocks base method.
func (m *MockTCloud) CreateCvm(kt *kit.Kit, opt *cvm.TCloudCreateOption) (*poller.BaseDoneResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCvm", kt, opt)
	ret0, _ := ret[0].(*poller.BaseDoneResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCvm indicates an expected call of CreateCvm.
func (mr *MockTCloudMockRecorder) CreateCvm(kt, opt interface{}) *TCloudCreateCvmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCvm", reflect.TypeOf((*MockTCloud)(nil).CreateCvm), kt, opt)
	return &TCloudCreateCvmCall{Call: call}
}

// TCloudCreateCvmCall wrap *gomock.Call
type TCloudCreateCvmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudCreateCvmCall) Return(arg0 *poller.BaseDoneResult, arg1 error) *TCloudCreateCvmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudCreateCvmCall) Do(f func(*kit.Kit, *cvm.TCloudCreateOption) (*poller.BaseDoneResult, error)) *TCloudCreateCvmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudCreateCvmCall) DoAndReturn(f func(*kit.Kit, *cvm.TCloudCreateOption) (*poller.BaseDoneResult, error)) *TCloudCreateCvmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateDisk mocks base method.
func (m *MockTCloud) CreateDisk(kt *kit.Kit, opt *disk.TCloudDiskCreateOption) (*poller.BaseDoneResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDisk", kt, opt)
	ret0, _ := ret[0].(*poller.BaseDoneResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDisk indicates an expected call of CreateDisk.
func (mr *MockTCloudMockRecorder) CreateDisk(kt, opt interface{}) *TCloudCreateDiskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDisk", reflect.TypeOf((*MockTCloud)(nil).CreateDisk), kt, opt)
	return &TCloudCreateDiskCall{Call: call}
}

// TCloudCreateDiskCall wrap *gomock.Call
type TCloudCreateDiskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudCreateDiskCall) Return(arg0 *poller.BaseDoneResult, arg1 error) *TCloudCreateDiskCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudCreateDiskCall) Do(f func(*kit.Kit, *disk.TCloudDiskCreateOption) (*poller.BaseDoneResult, error)) *TCloudCreateDiskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudCreateDiskCall) DoAndReturn(f func(*kit.Kit, *disk.TCloudDiskCreateOption) (*poller.BaseDoneResult, error)) *TCloudCreateDiskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateEip mocks base method.
func (m *MockTCloud) CreateEip(kt *kit.Kit, opt *eip.TCloudEipCreateOption) (*poller.BaseDoneResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEip", kt, opt)
	ret0, _ := ret[0].(*poller.BaseDoneResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEip indicates an expected call of CreateEip.
func (mr *MockTCloudMockRecorder) CreateEip(kt, opt interface{}) *TCloudCreateEipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEip", reflect.TypeOf((*MockTCloud)(nil).CreateEip), kt, opt)
	return &TCloudCreateEipCall{Call: call}
}

// TCloudCreateEipCall wrap *gomock.Call
type TCloudCreateEipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudCreateEipCall) Return(arg0 *poller.BaseDoneResult, arg1 error) *TCloudCreateEipCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudCreateEipCall) Do(f func(*kit.Kit, *eip.TCloudEipCreateOption) (*poller.BaseDoneResult, error)) *TCloudCreateEipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudCreateEipCall) DoAndReturn(f func(*kit.Kit, *eip.TCloudEipCreateOption) (*poller.BaseDoneResult, error)) *TCloudCreateEipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateSecurityGroup mocks base method.
func (m *MockTCloud) CreateSecurityGroup(kt *kit.Kit, opt *securitygroup.TCloudCreateOption) (*v20170312.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroup", kt, opt)
	ret0, _ := ret[0].(*v20170312.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroup indicates an expected call of CreateSecurityGroup.
func (mr *MockTCloudMockRecorder) CreateSecurityGroup(kt, opt interface{}) *TCloudCreateSecurityGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroup", reflect.TypeOf((*MockTCloud)(nil).CreateSecurityGroup), kt, opt)
	return &TCloudCreateSecurityGroupCall{Call: call}
}

// TCloudCreateSecurityGroupCall wrap *gomock.Call
type TCloudCreateSecurityGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudCreateSecurityGroupCall) Return(arg0 *v20170312.SecurityGroup, arg1 error) *TCloudCreateSecurityGroupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudCreateSecurityGroupCall) Do(f func(*kit.Kit, *securitygroup.TCloudCreateOption) (*v20170312.SecurityGroup, error)) *TCloudCreateSecurityGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudCreateSecurityGroupCall) DoAndReturn(f func(*kit.Kit, *securitygroup.TCloudCreateOption) (*v20170312.SecurityGroup, error)) *TCloudCreateSecurityGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateSecurityGroupRule mocks base method.
func (m *MockTCloud) CreateSecurityGroupRule(kt *kit.Kit, opt *securitygrouprule.TCloudCreateOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroupRule", kt, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSecurityGroupRule indicates an expected call of CreateSecurityGroupRule.
func (mr *MockTCloudMockRecorder) CreateSecurityGroupRule(kt, opt interface{}) *TCloudCreateSecurityGroupRuleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroupRule", reflect.TypeOf((*MockTCloud)(nil).CreateSecurityGroupRule), kt, opt)
	return &TCloudCreateSecurityGroupRuleCall{Call: call}
}

// TCloudCreateSecurityGroupRuleCall wrap *gomock.Call
type TCloudCreateSecurityGroupRuleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudCreateSecurityGroupRuleCall) Return(arg0 error) *TCloudCreateSecurityGroupRuleCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudCreateSecurityGroupRuleCall) Do(f func(*kit.Kit, *securitygrouprule.TCloudCreateOption) error) *TCloudCreateSecurityGroupRuleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudCreateSecurityGroupRuleCall) DoAndReturn(f func(*kit.Kit, *securitygrouprule.TCloudCreateOption) error) *TCloudCreateSecurityGroupRuleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateSubnet mocks base method.
func (m *MockTCloud) CreateSubnet(kt *kit.Kit, opt *adtysubnet.TCloudSubnetCreateOption) (*adtysubnet.TCloudSubnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubnet", kt, opt)
	ret0, _ := ret[0].(*adtysubnet.TCloudSubnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubnet indicates an expected call of CreateSubnet.
func (mr *MockTCloudMockRecorder) CreateSubnet(kt, opt interface{}) *TCloudCreateSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnet", reflect.TypeOf((*MockTCloud)(nil).CreateSubnet), kt, opt)
	return &TCloudCreateSubnetCall{Call: call}
}

// TCloudCreateSubnetCall wrap *gomock.Call
type TCloudCreateSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudCreateSubnetCall) Return(arg0 *adtysubnet.TCloudSubnet, arg1 error) *TCloudCreateSubnetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudCreateSubnetCall) Do(f func(*kit.Kit, *adtysubnet.TCloudSubnetCreateOption) (*adtysubnet.TCloudSubnet, error)) *TCloudCreateSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudCreateSubnetCall) DoAndReturn(f func(*kit.Kit, *adtysubnet.TCloudSubnetCreateOption) (*adtysubnet.TCloudSubnet, error)) *TCloudCreateSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateSubnets mocks base method.
func (m *MockTCloud) CreateSubnets(kt *kit.Kit, opt *adtysubnet.TCloudSubnetsCreateOption) ([]adtysubnet.TCloudSubnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubnets", kt, opt)
	ret0, _ := ret[0].([]adtysubnet.TCloudSubnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubnets indicates an expected call of CreateSubnets.
func (mr *MockTCloudMockRecorder) CreateSubnets(kt, opt interface{}) *TCloudCreateSubnetsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnets", reflect.TypeOf((*MockTCloud)(nil).CreateSubnets), kt, opt)
	return &TCloudCreateSubnetsCall{Call: call}
}

// TCloudCreateSubnetsCall wrap *gomock.Call
type TCloudCreateSubnetsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudCreateSubnetsCall) Return(arg0 []adtysubnet.TCloudSubnet, arg1 error) *TCloudCreateSubnetsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudCreateSubnetsCall) Do(f func(*kit.Kit, *adtysubnet.TCloudSubnetsCreateOption) ([]adtysubnet.TCloudSubnet, error)) *TCloudCreateSubnetsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudCreateSubnetsCall) DoAndReturn(f func(*kit.Kit, *adtysubnet.TCloudSubnetsCreateOption) ([]adtysubnet.TCloudSubnet, error)) *TCloudCreateSubnetsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateVpc mocks base method.
func (m *MockTCloud) CreateVpc(kt *kit.Kit, opt *types.TCloudVpcCreateOption) (*types.TCloudVpc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVpc", kt, opt)
	ret0, _ := ret[0].(*types.TCloudVpc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVpc indicates an expected call of CreateVpc.
func (mr *MockTCloudMockRecorder) CreateVpc(kt, opt interface{}) *TCloudCreateVpcCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVpc", reflect.TypeOf((*MockTCloud)(nil).CreateVpc), kt, opt)
	return &TCloudCreateVpcCall{Call: call}
}

// TCloudCreateVpcCall wrap *gomock.Call
type TCloudCreateVpcCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudCreateVpcCall) Return(arg0 *types.TCloudVpc, arg1 error) *TCloudCreateVpcCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudCreateVpcCall) Do(f func(*kit.Kit, *types.TCloudVpcCreateOption) (*types.TCloudVpc, error)) *TCloudCreateVpcCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudCreateVpcCall) DoAndReturn(f func(*kit.Kit, *types.TCloudVpcCreateOption) (*types.TCloudVpc, error)) *TCloudCreateVpcCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCvm mocks base method.
func (m *MockTCloud) DeleteCvm(kt *kit.Kit, opt *cvm.TCloudDeleteOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCvm", kt, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCvm indicates an expected call of DeleteCvm.
func (mr *MockTCloudMockRecorder) DeleteCvm(kt, opt interface{}) *TCloudDeleteCvmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCvm", reflect.TypeOf((*MockTCloud)(nil).DeleteCvm), kt, opt)
	return &TCloudDeleteCvmCall{Call: call}
}

// TCloudDeleteCvmCall wrap *gomock.Call
type TCloudDeleteCvmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudDeleteCvmCall) Return(arg0 error) *TCloudDeleteCvmCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudDeleteCvmCall) Do(f func(*kit.Kit, *cvm.TCloudDeleteOption) error) *TCloudDeleteCvmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudDeleteCvmCall) DoAndReturn(f func(*kit.Kit, *cvm.TCloudDeleteOption) error) *TCloudDeleteCvmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteDisk mocks base method.
func (m *MockTCloud) DeleteDisk(kt *kit.Kit, opt *disk.TCloudDiskDeleteOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDisk", kt, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDisk indicates an expected call of DeleteDisk.
func (mr *MockTCloudMockRecorder) DeleteDisk(kt, opt interface{}) *TCloudDeleteDiskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDisk", reflect.TypeOf((*MockTCloud)(nil).DeleteDisk), kt, opt)
	return &TCloudDeleteDiskCall{Call: call}
}

// TCloudDeleteDiskCall wrap *gomock.Call
type TCloudDeleteDiskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudDeleteDiskCall) Return(arg0 error) *TCloudDeleteDiskCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudDeleteDiskCall) Do(f func(*kit.Kit, *disk.TCloudDiskDeleteOption) error) *TCloudDeleteDiskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudDeleteDiskCall) DoAndReturn(f func(*kit.Kit, *disk.TCloudDiskDeleteOption) error) *TCloudDeleteDiskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteEip mocks base method.
func (m *MockTCloud) DeleteEip(kt *kit.Kit, opt *eip.TCloudEipDeleteOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEip", kt, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEip indicates an expected call of DeleteEip.
func (mr *MockTCloudMockRecorder) DeleteEip(kt, opt interface{}) *TCloudDeleteEipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEip", reflect.TypeOf((*MockTCloud)(nil).DeleteEip), kt, opt)
	return &TCloudDeleteEipCall{Call: call}
}

// TCloudDeleteEipCall wrap *gomock.Call
type TCloudDeleteEipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudDeleteEipCall) Return(arg0 error) *TCloudDeleteEipCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudDeleteEipCall) Do(f func(*kit.Kit, *eip.TCloudEipDeleteOption) error) *TCloudDeleteEipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudDeleteEipCall) DoAndReturn(f func(*kit.Kit, *eip.TCloudEipDeleteOption) error) *TCloudDeleteEipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteRouteTable mocks base method.
func (m *MockTCloud) DeleteRouteTable(kt *kit.Kit, opt *core.BaseRegionalDeleteOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteTable", kt, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouteTable indicates an expected call of DeleteRouteTable.
func (mr *MockTCloudMockRecorder) DeleteRouteTable(kt, opt interface{}) *TCloudDeleteRouteTableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteTable", reflect.TypeOf((*MockTCloud)(nil).DeleteRouteTable), kt, opt)
	return &TCloudDeleteRouteTableCall{Call: call}
}

// TCloudDeleteRouteTableCall wrap *gomock.Call
type TCloudDeleteRouteTableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudDeleteRouteTableCall) Return(arg0 error) *TCloudDeleteRouteTableCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudDeleteRouteTableCall) Do(f func(*kit.Kit, *core.BaseRegionalDeleteOption) error) *TCloudDeleteRouteTableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudDeleteRouteTableCall) DoAndReturn(f func(*kit.Kit, *core.BaseRegionalDeleteOption) error) *TCloudDeleteRouteTableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteSecurityGroup mocks base method.
func (m *MockTCloud) DeleteSecurityGroup(kt *kit.Kit, opt *securitygroup.TCloudDeleteOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroup", kt, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecurityGroup indicates an expected call of DeleteSecurityGroup.
func (mr *MockTCloudMockRecorder) DeleteSecurityGroup(kt, opt interface{}) *TCloudDeleteSecurityGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroup", reflect.TypeOf((*MockTCloud)(nil).DeleteSecurityGroup), kt, opt)
	return &TCloudDeleteSecurityGroupCall{Call: call}
}

// TCloudDeleteSecurityGroupCall wrap *gomock.Call
type TCloudDeleteSecurityGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudDeleteSecurityGroupCall) Return(arg0 error) *TCloudDeleteSecurityGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudDeleteSecurityGroupCall) Do(f func(*kit.Kit, *securitygroup.TCloudDeleteOption) error) *TCloudDeleteSecurityGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudDeleteSecurityGroupCall) DoAndReturn(f func(*kit.Kit, *securitygroup.TCloudDeleteOption) error) *TCloudDeleteSecurityGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteSecurityGroupRule mocks base method.
func (m *MockTCloud) DeleteSecurityGroupRule(kt *kit.Kit, opt *securitygrouprule.TCloudDeleteOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroupRule", kt, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecurityGroupRule indicates an expected call of DeleteSecurityGroupRule.
func (mr *MockTCloudMockRecorder) DeleteSecurityGroupRule(kt, opt interface{}) *TCloudDeleteSecurityGroupRuleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroupRule", reflect.TypeOf((*MockTCloud)(nil).DeleteSecurityGroupRule), kt, opt)
	return &TCloudDeleteSecurityGroupRuleCall{Call: call}
}

// TCloudDeleteSecurityGroupRuleCall wrap *gomock.Call
type TCloudDeleteSecurityGroupRuleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudDeleteSecurityGroupRuleCall) Return(arg0 error) *TCloudDeleteSecurityGroupRuleCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudDeleteSecurityGroupRuleCall) Do(f func(*kit.Kit, *securitygrouprule.TCloudDeleteOption) error) *TCloudDeleteSecurityGroupRuleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudDeleteSecurityGroupRuleCall) DoAndReturn(f func(*kit.Kit, *securitygrouprule.TCloudDeleteOption) error) *TCloudDeleteSecurityGroupRuleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteSubnet mocks base method.
func (m *MockTCloud) DeleteSubnet(kt *kit.Kit, opt *core.BaseRegionalDeleteOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubnet", kt, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubnet indicates an expected call of DeleteSubnet.
func (mr *MockTCloudMockRecorder) DeleteSubnet(kt, opt interface{}) *TCloudDeleteSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnet", reflect.TypeOf((*MockTCloud)(nil).DeleteSubnet), kt, opt)
	return &TCloudDeleteSubnetCall{Call: call}
}

// TCloudDeleteSubnetCall wrap *gomock.Call
type TCloudDeleteSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudDeleteSubnetCall) Return(arg0 error) *TCloudDeleteSubnetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudDeleteSubnetCall) Do(f func(*kit.Kit, *core.BaseRegionalDeleteOption) error) *TCloudDeleteSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudDeleteSubnetCall) DoAndReturn(f func(*kit.Kit, *core.BaseRegionalDeleteOption) error) *TCloudDeleteSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteVpc mocks base method.
func (m *MockTCloud) DeleteVpc(kt *kit.Kit, opt *core.BaseRegionalDeleteOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVpc", kt, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVpc indicates an expected call of DeleteVpc.
func (mr *MockTCloudMockRecorder) DeleteVpc(kt, opt interface{}) *TCloudDeleteVpcCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVpc", reflect.TypeOf((*MockTCloud)(nil).DeleteVpc), kt, opt)
	return &TCloudDeleteVpcCall{Call: call}
}

// TCloudDeleteVpcCall wrap *gomock.Call
type TCloudDeleteVpcCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudDeleteVpcCall) Return(arg0 error) *TCloudDeleteVpcCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudDeleteVpcCall) Do(f func(*kit.Kit, *core.BaseRegionalDeleteOption) error) *TCloudDeleteVpcCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudDeleteVpcCall) DoAndReturn(f func(*kit.Kit, *core.BaseRegionalDeleteOption) error) *TCloudDeleteVpcCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetachDisk mocks base method.
func (m *MockTCloud) DetachDisk(kt *kit.Kit, opt *disk.TCloudDiskDetachOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachDisk", kt, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachDisk indicates an expected call of DetachDisk.
func (mr *MockTCloudMockRecorder) DetachDisk(kt, opt interface{}) *TCloudDetachDiskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachDisk", reflect.TypeOf((*MockTCloud)(nil).DetachDisk), kt, opt)
	return &TCloudDetachDiskCall{Call: call}
}

// TCloudDetachDiskCall wrap *gomock.Call
type TCloudDetachDiskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudDetachDiskCall) Return(arg0 error) *TCloudDetachDiskCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudDetachDiskCall) Do(f func(*kit.Kit, *disk.TCloudDiskDetachOption) error) *TCloudDetachDiskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudDetachDiskCall) DoAndReturn(f func(*kit.Kit, *disk.TCloudDiskDetachOption) error) *TCloudDetachDiskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetermineIPv6Type mocks base method.
func (m *MockTCloud) DetermineIPv6Type(kt *kit.Kit, region string, ipv6Addresses []*string) ([]*string, []*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetermineIPv6Type", kt, region, ipv6Addresses)
	ret0, _ := ret[0].([]*string)
	ret1, _ := ret[1].([]*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DetermineIPv6Type indicates an expected call of DetermineIPv6Type.
func (mr *MockTCloudMockRecorder) DetermineIPv6Type(kt, region, ipv6Addresses interface{}) *TCloudDetermineIPv6TypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetermineIPv6Type", reflect.TypeOf((*MockTCloud)(nil).DetermineIPv6Type), kt, region, ipv6Addresses)
	return &TCloudDetermineIPv6TypeCall{Call: call}
}

// TCloudDetermineIPv6TypeCall wrap *gomock.Call
type TCloudDetermineIPv6TypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudDetermineIPv6TypeCall) Return(arg0, arg1 []*string, arg2 error) *TCloudDetermineIPv6TypeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudDetermineIPv6TypeCall) Do(f func(*kit.Kit, string, []*string) ([]*string, []*string, error)) *TCloudDetermineIPv6TypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudDetermineIPv6TypeCall) DoAndReturn(f func(*kit.Kit, string, []*string) ([]*string, []*string, error)) *TCloudDetermineIPv6TypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DisassociateEip mocks base method.
func (m *MockTCloud) DisassociateEip(kt *kit.Kit, opt *eip.TCloudEipDisassociateOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateEip", kt, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisassociateEip indicates an expected call of DisassociateEip.
func (mr *MockTCloudMockRecorder) DisassociateEip(kt, opt interface{}) *TCloudDisassociateEipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateEip", reflect.TypeOf((*MockTCloud)(nil).DisassociateEip), kt, opt)
	return &TCloudDisassociateEipCall{Call: call}
}

// TCloudDisassociateEipCall wrap *gomock.Call
type TCloudDisassociateEipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudDisassociateEipCall) Return(arg0 error) *TCloudDisassociateEipCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudDisassociateEipCall) Do(f func(*kit.Kit, *eip.TCloudEipDisassociateOption) error) *TCloudDisassociateEipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudDisassociateEipCall) DoAndReturn(f func(*kit.Kit, *eip.TCloudEipDisassociateOption) error) *TCloudDisassociateEipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAccountInfoBySecret mocks base method.
func (m *MockTCloud) GetAccountInfoBySecret(kt *kit.Kit) (*cloud.TCloudInfoBySecret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountInfoBySecret", kt)
	ret0, _ := ret[0].(*cloud.TCloudInfoBySecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountInfoBySecret indicates an expected call of GetAccountInfoBySecret.
func (mr *MockTCloudMockRecorder) GetAccountInfoBySecret(kt interface{}) *TCloudGetAccountInfoBySecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountInfoBySecret", reflect.TypeOf((*MockTCloud)(nil).GetAccountInfoBySecret), kt)
	return &TCloudGetAccountInfoBySecretCall{Call: call}
}

// TCloudGetAccountInfoBySecretCall wrap *gomock.Call
type TCloudGetAccountInfoBySecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudGetAccountInfoBySecretCall) Return(arg0 *cloud.TCloudInfoBySecret, arg1 error) *TCloudGetAccountInfoBySecretCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudGetAccountInfoBySecretCall) Do(f func(*kit.Kit) (*cloud.TCloudInfoBySecret, error)) *TCloudGetAccountInfoBySecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudGetAccountInfoBySecretCall) DoAndReturn(f func(*kit.Kit) (*cloud.TCloudInfoBySecret, error)) *TCloudGetAccountInfoBySecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAccountZoneQuota mocks base method.
func (m *MockTCloud) GetAccountZoneQuota(kt *kit.Kit, opt *account.GetTCloudAccountZoneQuotaOption) (*account.TCloudAccountQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountZoneQuota", kt, opt)
	ret0, _ := ret[0].(*account.TCloudAccountQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountZoneQuota indicates an expected call of GetAccountZoneQuota.
func (mr *MockTCloudMockRecorder) GetAccountZoneQuota(kt, opt interface{}) *TCloudGetAccountZoneQuotaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountZoneQuota", reflect.TypeOf((*MockTCloud)(nil).GetAccountZoneQuota), kt, opt)
	return &TCloudGetAccountZoneQuotaCall{Call: call}
}

// TCloudGetAccountZoneQuotaCall wrap *gomock.Call
type TCloudGetAccountZoneQuotaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudGetAccountZoneQuotaCall) Return(arg0 *account.TCloudAccountQuota, arg1 error) *TCloudGetAccountZoneQuotaCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudGetAccountZoneQuotaCall) Do(f func(*kit.Kit, *account.GetTCloudAccountZoneQuotaOption) (*account.TCloudAccountQuota, error)) *TCloudGetAccountZoneQuotaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudGetAccountZoneQuotaCall) DoAndReturn(f func(*kit.Kit, *account.GetTCloudAccountZoneQuotaOption) (*account.TCloudAccountQuota, error)) *TCloudGetAccountZoneQuotaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBillList mocks base method.
func (m *MockTCloud) GetBillList(kt *kit.Kit, opt *bill.TCloudBillListOption) (*v20180709.DescribeBillDetailResponseParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillList", kt, opt)
	ret0, _ := ret[0].(*v20180709.DescribeBillDetailResponseParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillList indicates an expected call of GetBillList.
func (mr *MockTCloudMockRecorder) GetBillList(kt, opt interface{}) *TCloudGetBillListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillList", reflect.TypeOf((*MockTCloud)(nil).GetBillList), kt, opt)
	return &TCloudGetBillListCall{Call: call}
}

// TCloudGetBillListCall wrap *gomock.Call
type TCloudGetBillListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudGetBillListCall) Return(arg0 *v20180709.DescribeBillDetailResponseParams, arg1 error) *TCloudGetBillListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudGetBillListCall) Do(f func(*kit.Kit, *bill.TCloudBillListOption) (*v20180709.DescribeBillDetailResponseParams, error)) *TCloudGetBillListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudGetBillListCall) DoAndReturn(f func(*kit.Kit, *bill.TCloudBillListOption) (*v20180709.DescribeBillDetailResponseParams, error)) *TCloudGetBillListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InquiryPriceCvm mocks base method.
func (m *MockTCloud) InquiryPriceCvm(kt *kit.Kit, opt *cvm.TCloudCreateOption) (*cvm.InquiryPriceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InquiryPriceCvm", kt, opt)
	ret0, _ := ret[0].(*cvm.InquiryPriceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InquiryPriceCvm indicates an expected call of InquiryPriceCvm.
func (mr *MockTCloudMockRecorder) InquiryPriceCvm(kt, opt interface{}) *TCloudInquiryPriceCvmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InquiryPriceCvm", reflect.TypeOf((*MockTCloud)(nil).InquiryPriceCvm), kt, opt)
	return &TCloudInquiryPriceCvmCall{Call: call}
}

// TCloudInquiryPriceCvmCall wrap *gomock.Call
type TCloudInquiryPriceCvmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudInquiryPriceCvmCall) Return(arg0 *cvm.InquiryPriceResult, arg1 error) *TCloudInquiryPriceCvmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudInquiryPriceCvmCall) Do(f func(*kit.Kit, *cvm.TCloudCreateOption) (*cvm.InquiryPriceResult, error)) *TCloudInquiryPriceCvmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudInquiryPriceCvmCall) DoAndReturn(f func(*kit.Kit, *cvm.TCloudCreateOption) (*cvm.InquiryPriceResult, error)) *TCloudInquiryPriceCvmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InquiryPriceDisk mocks base method.
func (m *MockTCloud) InquiryPriceDisk(kt *kit.Kit, opt *disk.TCloudDiskCreateOption) (*cvm.InquiryPriceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InquiryPriceDisk", kt, opt)
	ret0, _ := ret[0].(*cvm.InquiryPriceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InquiryPriceDisk indicates an expected call of InquiryPriceDisk.
func (mr *MockTCloudMockRecorder) InquiryPriceDisk(kt, opt interface{}) *TCloudInquiryPriceDiskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InquiryPriceDisk", reflect.TypeOf((*MockTCloud)(nil).InquiryPriceDisk), kt, opt)
	return &TCloudInquiryPriceDiskCall{Call: call}
}

// TCloudInquiryPriceDiskCall wrap *gomock.Call
type TCloudInquiryPriceDiskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudInquiryPriceDiskCall) Return(arg0 *cvm.InquiryPriceResult, arg1 error) *TCloudInquiryPriceDiskCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudInquiryPriceDiskCall) Do(f func(*kit.Kit, *disk.TCloudDiskCreateOption) (*cvm.InquiryPriceResult, error)) *TCloudInquiryPriceDiskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudInquiryPriceDiskCall) DoAndReturn(f func(*kit.Kit, *disk.TCloudDiskCreateOption) (*cvm.InquiryPriceResult, error)) *TCloudInquiryPriceDiskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAccount mocks base method.
func (m *MockTCloud) ListAccount(kt *kit.Kit) ([]account.TCloudAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccount", kt)
	ret0, _ := ret[0].([]account.TCloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccount indicates an expected call of ListAccount.
func (mr *MockTCloudMockRecorder) ListAccount(kt interface{}) *TCloudListAccountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccount", reflect.TypeOf((*MockTCloud)(nil).ListAccount), kt)
	return &TCloudListAccountCall{Call: call}
}

// TCloudListAccountCall wrap *gomock.Call
type TCloudListAccountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudListAccountCall) Return(arg0 []account.TCloudAccount, arg1 error) *TCloudListAccountCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudListAccountCall) Do(f func(*kit.Kit) ([]account.TCloudAccount, error)) *TCloudListAccountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudListAccountCall) DoAndReturn(f func(*kit.Kit) ([]account.TCloudAccount, error)) *TCloudListAccountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListCvm mocks base method.
func (m *MockTCloud) ListCvm(kt *kit.Kit, opt *cvm.TCloudListOption) ([]cvm.TCloudCvm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCvm", kt, opt)
	ret0, _ := ret[0].([]cvm.TCloudCvm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCvm indicates an expected call of ListCvm.
func (mr *MockTCloudMockRecorder) ListCvm(kt, opt interface{}) *TCloudListCvmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCvm", reflect.TypeOf((*MockTCloud)(nil).ListCvm), kt, opt)
	return &TCloudListCvmCall{Call: call}
}

// TCloudListCvmCall wrap *gomock.Call
type TCloudListCvmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudListCvmCall) Return(arg0 []cvm.TCloudCvm, arg1 error) *TCloudListCvmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudListCvmCall) Do(f func(*kit.Kit, *cvm.TCloudListOption) ([]cvm.TCloudCvm, error)) *TCloudListCvmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudListCvmCall) DoAndReturn(f func(*kit.Kit, *cvm.TCloudListOption) ([]cvm.TCloudCvm, error)) *TCloudListCvmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListDisk mocks base method.
func (m *MockTCloud) ListDisk(kt *kit.Kit, opt *core.TCloudListOption) ([]disk.TCloudDisk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDisk", kt, opt)
	ret0, _ := ret[0].([]disk.TCloudDisk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDisk indicates an expected call of ListDisk.
func (mr *MockTCloudMockRecorder) ListDisk(kt, opt interface{}) *TCloudListDiskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDisk", reflect.TypeOf((*MockTCloud)(nil).ListDisk), kt, opt)
	return &TCloudListDiskCall{Call: call}
}

// TCloudListDiskCall wrap *gomock.Call
type TCloudListDiskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudListDiskCall) Return(arg0 []disk.TCloudDisk, arg1 error) *TCloudListDiskCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudListDiskCall) Do(f func(*kit.Kit, *core.TCloudListOption) ([]disk.TCloudDisk, error)) *TCloudListDiskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudListDiskCall) DoAndReturn(f func(*kit.Kit, *core.TCloudListOption) ([]disk.TCloudDisk, error)) *TCloudListDiskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListEip mocks base method.
func (m *MockTCloud) ListEip(kt *kit.Kit, opt *eip.TCloudEipListOption) (*eip.TCloudEipListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEip", kt, opt)
	ret0, _ := ret[0].(*eip.TCloudEipListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEip indicates an expected call of ListEip.
func (mr *MockTCloudMockRecorder) ListEip(kt, opt interface{}) *TCloudListEipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEip", reflect.TypeOf((*MockTCloud)(nil).ListEip), kt, opt)
	return &TCloudListEipCall{Call: call}
}

// TCloudListEipCall wrap *gomock.Call
type TCloudListEipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudListEipCall) Return(arg0 *eip.TCloudEipListResult, arg1 error) *TCloudListEipCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudListEipCall) Do(f func(*kit.Kit, *eip.TCloudEipListOption) (*eip.TCloudEipListResult, error)) *TCloudListEipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudListEipCall) DoAndReturn(f func(*kit.Kit, *eip.TCloudEipListOption) (*eip.TCloudEipListResult, error)) *TCloudListEipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListImage mocks base method.
func (m *MockTCloud) ListImage(kt *kit.Kit, opt *image.TCloudImageListOption) (*image.TCloudImageListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImage", kt, opt)
	ret0, _ := ret[0].(*image.TCloudImageListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImage indicates an expected call of ListImage.
func (mr *MockTCloudMockRecorder) ListImage(kt, opt interface{}) *TCloudListImageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImage", reflect.TypeOf((*MockTCloud)(nil).ListImage), kt, opt)
	return &TCloudListImageCall{Call: call}
}

// TCloudListImageCall wrap *gomock.Call
type TCloudListImageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudListImageCall) Return(arg0 *image.TCloudImageListResult, arg1 error) *TCloudListImageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudListImageCall) Do(f func(*kit.Kit, *image.TCloudImageListOption) (*image.TCloudImageListResult, error)) *TCloudListImageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudListImageCall) DoAndReturn(f func(*kit.Kit, *image.TCloudImageListOption) (*image.TCloudImageListResult, error)) *TCloudListImageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListInstanceType mocks base method.
func (m *MockTCloud) ListInstanceType(kt *kit.Kit, opt *instancetype.TCloudInstanceTypeListOption) ([]instancetype.TCloudInstanceType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceType", kt, opt)
	ret0, _ := ret[0].([]instancetype.TCloudInstanceType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstanceType indicates an expected call of ListInstanceType.
func (mr *MockTCloudMockRecorder) ListInstanceType(kt, opt interface{}) *TCloudListInstanceTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceType", reflect.TypeOf((*MockTCloud)(nil).ListInstanceType), kt, opt)
	return &TCloudListInstanceTypeCall{Call: call}
}

// TCloudListInstanceTypeCall wrap *gomock.Call
type TCloudListInstanceTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudListInstanceTypeCall) Return(arg0 []instancetype.TCloudInstanceType, arg1 error) *TCloudListInstanceTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudListInstanceTypeCall) Do(f func(*kit.Kit, *instancetype.TCloudInstanceTypeListOption) ([]instancetype.TCloudInstanceType, error)) *TCloudListInstanceTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudListInstanceTypeCall) DoAndReturn(f func(*kit.Kit, *instancetype.TCloudInstanceTypeListOption) ([]instancetype.TCloudInstanceType, error)) *TCloudListInstanceTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListPoliciesGrantingServiceAccess mocks base method.
func (m *MockTCloud) ListPoliciesGrantingServiceAccess(kt *kit.Kit, opt *account.TCloudListPolicyOption) ([]*v20190116.ListGrantServiceAccessNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPoliciesGrantingServiceAccess", kt, opt)
	ret0, _ := ret[0].([]*v20190116.ListGrantServiceAccessNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPoliciesGrantingServiceAccess indicates an expected call of ListPoliciesGrantingServiceAccess.
func (mr *MockTCloudMockRecorder) ListPoliciesGrantingServiceAccess(kt, opt interface{}) *TCloudListPoliciesGrantingServiceAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPoliciesGrantingServiceAccess", reflect.TypeOf((*MockTCloud)(nil).ListPoliciesGrantingServiceAccess), kt, opt)
	return &TCloudListPoliciesGrantingServiceAccessCall{Call: call}
}

// TCloudListPoliciesGrantingServiceAccessCall wrap *gomock.Call
type TCloudListPoliciesGrantingServiceAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudListPoliciesGrantingServiceAccessCall) Return(arg0 []*v20190116.ListGrantServiceAccessNode, arg1 error) *TCloudListPoliciesGrantingServiceAccessCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudListPoliciesGrantingServiceAccessCall) Do(f func(*kit.Kit, *account.TCloudListPolicyOption) ([]*v20190116.ListGrantServiceAccessNode, error)) *TCloudListPoliciesGrantingServiceAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudListPoliciesGrantingServiceAccessCall) DoAndReturn(f func(*kit.Kit, *account.TCloudListPolicyOption) ([]*v20190116.ListGrantServiceAccessNode, error)) *TCloudListPoliciesGrantingServiceAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListRegion mocks base method.
func (m *MockTCloud) ListRegion(kt *kit.Kit) (*region.TCloudRegionListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegion", kt)
	ret0, _ := ret[0].(*region.TCloudRegionListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegion indicates an expected call of ListRegion.
func (mr *MockTCloudMockRecorder) ListRegion(kt interface{}) *TCloudListRegionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegion", reflect.TypeOf((*MockTCloud)(nil).ListRegion), kt)
	return &TCloudListRegionCall{Call: call}
}

// TCloudListRegionCall wrap *gomock.Call
type TCloudListRegionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudListRegionCall) Return(arg0 *region.TCloudRegionListResult, arg1 error) *TCloudListRegionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudListRegionCall) Do(f func(*kit.Kit) (*region.TCloudRegionListResult, error)) *TCloudListRegionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudListRegionCall) DoAndReturn(f func(*kit.Kit) (*region.TCloudRegionListResult, error)) *TCloudListRegionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListRouteTable mocks base method.
func (m *MockTCloud) ListRouteTable(kt *kit.Kit, opt *core.TCloudListOption) (*routetable.TCloudRouteTableListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRouteTable", kt, opt)
	ret0, _ := ret[0].(*routetable.TCloudRouteTableListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouteTable indicates an expected call of ListRouteTable.
func (mr *MockTCloudMockRecorder) ListRouteTable(kt, opt interface{}) *TCloudListRouteTableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouteTable", reflect.TypeOf((*MockTCloud)(nil).ListRouteTable), kt, opt)
	return &TCloudListRouteTableCall{Call: call}
}

// TCloudListRouteTableCall wrap *gomock.Call
type TCloudListRouteTableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudListRouteTableCall) Return(arg0 *routetable.TCloudRouteTableListResult, arg1 error) *TCloudListRouteTableCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudListRouteTableCall) Do(f func(*kit.Kit, *core.TCloudListOption) (*routetable.TCloudRouteTableListResult, error)) *TCloudListRouteTableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudListRouteTableCall) DoAndReturn(f func(*kit.Kit, *core.TCloudListOption) (*routetable.TCloudRouteTableListResult, error)) *TCloudListRouteTableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListSecurityGroupNew mocks base method.
func (m *MockTCloud) ListSecurityGroupNew(kt *kit.Kit, opt *securitygroup.TCloudListOption) ([]securitygroup.TCloudSG, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityGroupNew", kt, opt)
	ret0, _ := ret[0].([]securitygroup.TCloudSG)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityGroupNew indicates an expected call of ListSecurityGroupNew.
func (mr *MockTCloudMockRecorder) ListSecurityGroupNew(kt, opt interface{}) *TCloudListSecurityGroupNewCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityGroupNew", reflect.TypeOf((*MockTCloud)(nil).ListSecurityGroupNew), kt, opt)
	return &TCloudListSecurityGroupNewCall{Call: call}
}

// TCloudListSecurityGroupNewCall wrap *gomock.Call
type TCloudListSecurityGroupNewCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudListSecurityGroupNewCall) Return(arg0 []securitygroup.TCloudSG, arg1 error) *TCloudListSecurityGroupNewCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudListSecurityGroupNewCall) Do(f func(*kit.Kit, *securitygroup.TCloudListOption) ([]securitygroup.TCloudSG, error)) *TCloudListSecurityGroupNewCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudListSecurityGroupNewCall) DoAndReturn(f func(*kit.Kit, *securitygroup.TCloudListOption) ([]securitygroup.TCloudSG, error)) *TCloudListSecurityGroupNewCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListSecurityGroupRule mocks base method.
func (m *MockTCloud) ListSecurityGroupRule(kt *kit.Kit, opt *securitygrouprule.TCloudListOption) (*v20170312.SecurityGroupPolicySet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityGroupRule", kt, opt)
	ret0, _ := ret[0].(*v20170312.SecurityGroupPolicySet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityGroupRule indicates an expected call of ListSecurityGroupRule.
func (mr *MockTCloudMockRecorder) ListSecurityGroupRule(kt, opt interface{}) *TCloudListSecurityGroupRuleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityGroupRule", reflect.TypeOf((*MockTCloud)(nil).ListSecurityGroupRule), kt, opt)
	return &TCloudListSecurityGroupRuleCall{Call: call}
}

// TCloudListSecurityGroupRuleCall wrap *gomock.Call
type TCloudListSecurityGroupRuleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudListSecurityGroupRuleCall) Return(arg0 *v20170312.SecurityGroupPolicySet, arg1 error) *TCloudListSecurityGroupRuleCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudListSecurityGroupRuleCall) Do(f func(*kit.Kit, *securitygrouprule.TCloudListOption) (*v20170312.SecurityGroupPolicySet, error)) *TCloudListSecurityGroupRuleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudListSecurityGroupRuleCall) DoAndReturn(f func(*kit.Kit, *securitygrouprule.TCloudListOption) (*v20170312.SecurityGroupPolicySet, error)) *TCloudListSecurityGroupRuleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListSubnet mocks base method.
func (m *MockTCloud) ListSubnet(kt *kit.Kit, opt *core.TCloudListOption) (*adtysubnet.TCloudSubnetListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubnet", kt, opt)
	ret0, _ := ret[0].(*adtysubnet.TCloudSubnetListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubnet indicates an expected call of ListSubnet.
func (mr *MockTCloudMockRecorder) ListSubnet(kt, opt interface{}) *TCloudListSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubnet", reflect.TypeOf((*MockTCloud)(nil).ListSubnet), kt, opt)
	return &TCloudListSubnetCall{Call: call}
}

// TCloudListSubnetCall wrap *gomock.Call
type TCloudListSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudListSubnetCall) Return(arg0 *adtysubnet.TCloudSubnetListResult, arg1 error) *TCloudListSubnetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudListSubnetCall) Do(f func(*kit.Kit, *core.TCloudListOption) (*adtysubnet.TCloudSubnetListResult, error)) *TCloudListSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudListSubnetCall) DoAndReturn(f func(*kit.Kit, *core.TCloudListOption) (*adtysubnet.TCloudSubnetListResult, error)) *TCloudListSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListVpc mocks base method.
func (m *MockTCloud) ListVpc(kt *kit.Kit, opt *core.TCloudListOption) (*types.TCloudVpcListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVpc", kt, opt)
	ret0, _ := ret[0].(*types.TCloudVpcListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVpc indicates an expected call of ListVpc.
func (mr *MockTCloudMockRecorder) ListVpc(kt, opt interface{}) *TCloudListVpcCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVpc", reflect.TypeOf((*MockTCloud)(nil).ListVpc), kt, opt)
	return &TCloudListVpcCall{Call: call}
}

// TCloudListVpcCall wrap *gomock.Call
type TCloudListVpcCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudListVpcCall) Return(arg0 *types.TCloudVpcListResult, arg1 error) *TCloudListVpcCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudListVpcCall) Do(f func(*kit.Kit, *core.TCloudListOption) (*types.TCloudVpcListResult, error)) *TCloudListVpcCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudListVpcCall) DoAndReturn(f func(*kit.Kit, *core.TCloudListOption) (*types.TCloudVpcListResult, error)) *TCloudListVpcCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListZone mocks base method.
func (m *MockTCloud) ListZone(kt *kit.Kit, opt *zone.TCloudZoneListOption) ([]zone.TCloudZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListZone", kt, opt)
	ret0, _ := ret[0].([]zone.TCloudZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListZone indicates an expected call of ListZone.
func (mr *MockTCloudMockRecorder) ListZone(kt, opt interface{}) *TCloudListZoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListZone", reflect.TypeOf((*MockTCloud)(nil).ListZone), kt, opt)
	return &TCloudListZoneCall{Call: call}
}

// TCloudListZoneCall wrap *gomock.Call
type TCloudListZoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudListZoneCall) Return(arg0 []zone.TCloudZone, arg1 error) *TCloudListZoneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudListZoneCall) Do(f func(*kit.Kit, *zone.TCloudZoneListOption) ([]zone.TCloudZone, error)) *TCloudListZoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudListZoneCall) DoAndReturn(f func(*kit.Kit, *zone.TCloudZoneListOption) ([]zone.TCloudZone, error)) *TCloudListZoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RebootCvm mocks base method.
func (m *MockTCloud) RebootCvm(kt *kit.Kit, opt *cvm.TCloudRebootOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootCvm", kt, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// RebootCvm indicates an expected call of RebootCvm.
func (mr *MockTCloudMockRecorder) RebootCvm(kt, opt interface{}) *TCloudRebootCvmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootCvm", reflect.TypeOf((*MockTCloud)(nil).RebootCvm), kt, opt)
	return &TCloudRebootCvmCall{Call: call}
}

// TCloudRebootCvmCall wrap *gomock.Call
type TCloudRebootCvmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudRebootCvmCall) Return(arg0 error) *TCloudRebootCvmCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudRebootCvmCall) Do(f func(*kit.Kit, *cvm.TCloudRebootOption) error) *TCloudRebootCvmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudRebootCvmCall) DoAndReturn(f func(*kit.Kit, *cvm.TCloudRebootOption) error) *TCloudRebootCvmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResetCvmPwd mocks base method.
func (m *MockTCloud) ResetCvmPwd(kt *kit.Kit, opt *cvm.TCloudResetPwdOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetCvmPwd", kt, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetCvmPwd indicates an expected call of ResetCvmPwd.
func (mr *MockTCloudMockRecorder) ResetCvmPwd(kt, opt interface{}) *TCloudResetCvmPwdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCvmPwd", reflect.TypeOf((*MockTCloud)(nil).ResetCvmPwd), kt, opt)
	return &TCloudResetCvmPwdCall{Call: call}
}

// TCloudResetCvmPwdCall wrap *gomock.Call
type TCloudResetCvmPwdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudResetCvmPwdCall) Return(arg0 error) *TCloudResetCvmPwdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudResetCvmPwdCall) Do(f func(*kit.Kit, *cvm.TCloudResetPwdOption) error) *TCloudResetCvmPwdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudResetCvmPwdCall) DoAndReturn(f func(*kit.Kit, *cvm.TCloudResetPwdOption) error) *TCloudResetCvmPwdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SecurityGroupCvmAssociate mocks base method.
func (m *MockTCloud) SecurityGroupCvmAssociate(kt *kit.Kit, opt *securitygroup.TCloudAssociateCvmOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecurityGroupCvmAssociate", kt, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecurityGroupCvmAssociate indicates an expected call of SecurityGroupCvmAssociate.
func (mr *MockTCloudMockRecorder) SecurityGroupCvmAssociate(kt, opt interface{}) *TCloudSecurityGroupCvmAssociateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecurityGroupCvmAssociate", reflect.TypeOf((*MockTCloud)(nil).SecurityGroupCvmAssociate), kt, opt)
	return &TCloudSecurityGroupCvmAssociateCall{Call: call}
}

// TCloudSecurityGroupCvmAssociateCall wrap *gomock.Call
type TCloudSecurityGroupCvmAssociateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudSecurityGroupCvmAssociateCall) Return(arg0 error) *TCloudSecurityGroupCvmAssociateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudSecurityGroupCvmAssociateCall) Do(f func(*kit.Kit, *securitygroup.TCloudAssociateCvmOption) error) *TCloudSecurityGroupCvmAssociateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudSecurityGroupCvmAssociateCall) DoAndReturn(f func(*kit.Kit, *securitygroup.TCloudAssociateCvmOption) error) *TCloudSecurityGroupCvmAssociateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SecurityGroupCvmDisassociate mocks base method.
func (m *MockTCloud) SecurityGroupCvmDisassociate(kt *kit.Kit, opt *securitygroup.TCloudAssociateCvmOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecurityGroupCvmDisassociate", kt, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecurityGroupCvmDisassociate indicates an expected call of SecurityGroupCvmDisassociate.
func (mr *MockTCloudMockRecorder) SecurityGroupCvmDisassociate(kt, opt interface{}) *TCloudSecurityGroupCvmDisassociateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecurityGroupCvmDisassociate", reflect.TypeOf((*MockTCloud)(nil).SecurityGroupCvmDisassociate), kt, opt)
	return &TCloudSecurityGroupCvmDisassociateCall{Call: call}
}

// TCloudSecurityGroupCvmDisassociateCall wrap *gomock.Call
type TCloudSecurityGroupCvmDisassociateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudSecurityGroupCvmDisassociateCall) Return(arg0 error) *TCloudSecurityGroupCvmDisassociateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudSecurityGroupCvmDisassociateCall) Do(f func(*kit.Kit, *securitygroup.TCloudAssociateCvmOption) error) *TCloudSecurityGroupCvmDisassociateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudSecurityGroupCvmDisassociateCall) DoAndReturn(f func(*kit.Kit, *securitygroup.TCloudAssociateCvmOption) error) *TCloudSecurityGroupCvmDisassociateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartCvm mocks base method.
func (m *MockTCloud) StartCvm(kt *kit.Kit, opt *cvm.TCloudStartOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCvm", kt, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartCvm indicates an expected call of StartCvm.
func (mr *MockTCloudMockRecorder) StartCvm(kt, opt interface{}) *TCloudStartCvmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCvm", reflect.TypeOf((*MockTCloud)(nil).StartCvm), kt, opt)
	return &TCloudStartCvmCall{Call: call}
}

// TCloudStartCvmCall wrap *gomock.Call
type TCloudStartCvmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudStartCvmCall) Return(arg0 error) *TCloudStartCvmCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudStartCvmCall) Do(f func(*kit.Kit, *cvm.TCloudStartOption) error) *TCloudStartCvmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudStartCvmCall) DoAndReturn(f func(*kit.Kit, *cvm.TCloudStartOption) error) *TCloudStartCvmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StopCvm mocks base method.
func (m *MockTCloud) StopCvm(kt *kit.Kit, opt *cvm.TCloudStopOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCvm", kt, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopCvm indicates an expected call of StopCvm.
func (mr *MockTCloudMockRecorder) StopCvm(kt, opt interface{}) *TCloudStopCvmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCvm", reflect.TypeOf((*MockTCloud)(nil).StopCvm), kt, opt)
	return &TCloudStopCvmCall{Call: call}
}

// TCloudStopCvmCall wrap *gomock.Call
type TCloudStopCvmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudStopCvmCall) Return(arg0 error) *TCloudStopCvmCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudStopCvmCall) Do(f func(*kit.Kit, *cvm.TCloudStopOption) error) *TCloudStopCvmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudStopCvmCall) DoAndReturn(f func(*kit.Kit, *cvm.TCloudStopOption) error) *TCloudStopCvmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateRouteTable mocks base method.
func (m *MockTCloud) UpdateRouteTable(arg0 *kit.Kit, arg1 *routetable.TCloudRouteTableUpdateOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRouteTable", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRouteTable indicates an expected call of UpdateRouteTable.
func (mr *MockTCloudMockRecorder) UpdateRouteTable(arg0, arg1 interface{}) *TCloudUpdateRouteTableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteTable", reflect.TypeOf((*MockTCloud)(nil).UpdateRouteTable), arg0, arg1)
	return &TCloudUpdateRouteTableCall{Call: call}
}

// TCloudUpdateRouteTableCall wrap *gomock.Call
type TCloudUpdateRouteTableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudUpdateRouteTableCall) Return(arg0 error) *TCloudUpdateRouteTableCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudUpdateRouteTableCall) Do(f func(*kit.Kit, *routetable.TCloudRouteTableUpdateOption) error) *TCloudUpdateRouteTableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudUpdateRouteTableCall) DoAndReturn(f func(*kit.Kit, *routetable.TCloudRouteTableUpdateOption) error) *TCloudUpdateRouteTableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSecurityGroup mocks base method.
func (m *MockTCloud) UpdateSecurityGroup(kt *kit.Kit, opt *securitygroup.TCloudUpdateOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecurityGroup", kt, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecurityGroup indicates an expected call of UpdateSecurityGroup.
func (mr *MockTCloudMockRecorder) UpdateSecurityGroup(kt, opt interface{}) *TCloudUpdateSecurityGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecurityGroup", reflect.TypeOf((*MockTCloud)(nil).UpdateSecurityGroup), kt, opt)
	return &TCloudUpdateSecurityGroupCall{Call: call}
}

// TCloudUpdateSecurityGroupCall wrap *gomock.Call
type TCloudUpdateSecurityGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudUpdateSecurityGroupCall) Return(arg0 error) *TCloudUpdateSecurityGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudUpdateSecurityGroupCall) Do(f func(*kit.Kit, *securitygroup.TCloudUpdateOption) error) *TCloudUpdateSecurityGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudUpdateSecurityGroupCall) DoAndReturn(f func(*kit.Kit, *securitygroup.TCloudUpdateOption) error) *TCloudUpdateSecurityGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSecurityGroupRule mocks base method.
func (m *MockTCloud) UpdateSecurityGroupRule(kt *kit.Kit, opt *securitygrouprule.TCloudUpdateOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecurityGroupRule", kt, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecurityGroupRule indicates an expected call of UpdateSecurityGroupRule.
func (mr *MockTCloudMockRecorder) UpdateSecurityGroupRule(kt, opt interface{}) *TCloudUpdateSecurityGroupRuleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecurityGroupRule", reflect.TypeOf((*MockTCloud)(nil).UpdateSecurityGroupRule), kt, opt)
	return &TCloudUpdateSecurityGroupRuleCall{Call: call}
}

// TCloudUpdateSecurityGroupRuleCall wrap *gomock.Call
type TCloudUpdateSecurityGroupRuleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudUpdateSecurityGroupRuleCall) Return(arg0 error) *TCloudUpdateSecurityGroupRuleCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudUpdateSecurityGroupRuleCall) Do(f func(*kit.Kit, *securitygrouprule.TCloudUpdateOption) error) *TCloudUpdateSecurityGroupRuleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudUpdateSecurityGroupRuleCall) DoAndReturn(f func(*kit.Kit, *securitygrouprule.TCloudUpdateOption) error) *TCloudUpdateSecurityGroupRuleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSubnet mocks base method.
func (m *MockTCloud) UpdateSubnet(arg0 *kit.Kit, arg1 *adtysubnet.TCloudSubnetUpdateOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubnet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubnet indicates an expected call of UpdateSubnet.
func (mr *MockTCloudMockRecorder) UpdateSubnet(arg0, arg1 interface{}) *TCloudUpdateSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubnet", reflect.TypeOf((*MockTCloud)(nil).UpdateSubnet), arg0, arg1)
	return &TCloudUpdateSubnetCall{Call: call}
}

// TCloudUpdateSubnetCall wrap *gomock.Call
type TCloudUpdateSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudUpdateSubnetCall) Return(arg0 error) *TCloudUpdateSubnetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudUpdateSubnetCall) Do(f func(*kit.Kit, *adtysubnet.TCloudSubnetUpdateOption) error) *TCloudUpdateSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudUpdateSubnetCall) DoAndReturn(f func(*kit.Kit, *adtysubnet.TCloudSubnetUpdateOption) error) *TCloudUpdateSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateVpc mocks base method.
func (m *MockTCloud) UpdateVpc(arg0 *kit.Kit, arg1 *types.TCloudVpcUpdateOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVpc", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVpc indicates an expected call of UpdateVpc.
func (mr *MockTCloudMockRecorder) UpdateVpc(arg0, arg1 interface{}) *TCloudUpdateVpcCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVpc", reflect.TypeOf((*MockTCloud)(nil).UpdateVpc), arg0, arg1)
	return &TCloudUpdateVpcCall{Call: call}
}

// TCloudUpdateVpcCall wrap *gomock.Call
type TCloudUpdateVpcCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TCloudUpdateVpcCall) Return(arg0 error) *TCloudUpdateVpcCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TCloudUpdateVpcCall) Do(f func(*kit.Kit, *types.TCloudVpcUpdateOption) error) *TCloudUpdateVpcCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TCloudUpdateVpcCall) DoAndReturn(f func(*kit.Kit, *types.TCloudVpcUpdateOption) error) *TCloudUpdateVpcCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
