global:
  imageRegistry: "docker.io"
  imagePullSecrets: []
  imagePullPolicy: IfNotPresent
  storageClass: ""

  ## 蓝鲸主域名访问协议http/https
  bkDomainScheme: http

# configuration of hcm image registry, use global imageRegistry/imagePullPolicy if unset
image:
  registry: hub.bktencent.com
  pullPolicy: IfNotPresent
  pullSecrets: []
  tag: 1.6.8-alpha.2

serviceAccount:
  create: true
  name: ""

## Ingress
##
ingress:
  enabled: true
  ## 共享域名是通过url path路由到不同Service，只支持Nginx-ingress作为Ingress Controller，且已默认配置rewrite
  ## 一旦确定，不能随意修改，否则会影响(1)注册到IAM的回调地址 (2) 注册到APIGateway的网关资源后端Host和Path
  shareDomainEnable: true
  host: bkhcm.example.com
  annotations: { }
  tls: false
  apiserver:
    enabled: true
    ## 非共享域名时需要填写单独的域名
    host: bkhcm-api.example.com
  authserver:
    enabled: true
    ## 非共享域名时需要填写单独的域名
    host: bkhcm-auth.example.com
  webserver:
    enabled: true
    ## 非共享域名时需要填写单独的域名
    host: bkhcm.example.com

apiserver:
  ## 镜像
  ##
  image:
    repository: blueking/bk-hcm-apiserver
    tag:
  ## 日志配置
  ##
  log:
    logDir: /data/hcm/logs
    maxPerFileSizeMB: 1024
    maxPerLineSizeKB: 2
    maxFileNum: 5
    logAppend: false
    toStdErr: false
    # default to output log to stderr
    alsoToStdErr: true
    verbosity: 0
  ## 在启用JWT情况apigateway公钥 base64字符串
  ##
  disableJwt: false
  apigwPublicKey:
  ## pod配置
  ##
  replicas: 1
  podAnnotations: { }
  affinity: { }
  nodeSelector: { }
  tolerations: [ ]
  resources:
    limits:
      cpu: 200m
      memory: 1024Mi
    requests:
      cpu: 200m
      memory: 512Mi
  service:
    type: "ClusterIP"
    ports:
      - name: http
        protocol: TCP
        port: 80
        targetPort: 80
        nodePort:
  ## Pod对应提供服务的port 与service里的targetPort必须一致
  port: 80

authserver:
  ## 镜像
  ##
  image:
    repository: blueking/bk-hcm-authserver
    tag:
  ## 日志配置
  ##
  log:
    logDir: /data/hcm/logs
    maxPerFileSizeMB: 1024
    maxPerLineSizeKB: 2
    maxFileNum: 5
    logAppend: false
    toStdErr: false
    alsoToStdErr: true
    verbosity: 0
  ## pod配置
  ##
  replicas: 1
  podAnnotations: { }
  affinity: { }
  nodeSelector: { }
  tolerations: [ ]
  resources:
    limits:
      cpu: 200m
      memory: 1024Mi
    requests:
      memory: 512Mi
      cpu: 200m
  service:
    type: "ClusterIP"
    ports:
      - name: http
        protocol: TCP
        port: 80
        targetPort: 80
        nodePort:
  ## Pod对应提供服务的port 与service里的targetPort必须一致
  port: 80

cloudserver:
  ## 镜像
  ##
  image:
    repository: blueking/bk-hcm-cloudserver
    tag:
  ## 日志配置
  ##
  log:
    alsoToStdErr: true
    logDir: /data/hcm/logs
    maxPerFileSizeMB: 1024
    maxPerLineSizeKB: 2
    maxFileNum: 5
    logAppend: false
    toStdErr: false
    verbosity: 0
  ## cloudResource cloud resource relation settings.
  cloudResource:
    ## sync cloud resource sync relation settings.
    sync:
      ## enable if enable cloud resource sync.
      enable: true
      ## syncIntervalMin cloud resource sync interval, unit: min.
      syncIntervalMin: 360
      ## syncTimeoutMin 限频时间
      syncFrequencyLimitingTimeMin: 20
  ## recycle is recycle bin related settings.
  recycle:
    ## autoDeleteTimeHour auto delete recycle bin resource time, unit: hour.
    autoDeleteTimeHour: 48
  # billConfig bill config settings.
  billConfig:
    # enable if enable bill config.
    enable: true
    # syncIntervalMin bill config interval, unit: min.
    syncIntervalMin: 30
  cloudSelection:
    # 用户分布采样往前偏移的天数，2 代表用两天前的数据采集用户分布数据
    userDistributionSampleOffset: 2
    # 延迟数据平均值采样天数，30 代表使用前30天的数据
    avgLatencySampleDays: 30
    # 推荐算法可执行文件调用配置
    algorithmPlugin:
      binaryPath: plugin/algorithm
      args: []
    defaultIdcPrice:
      huawei: 0.2
      tcloud: 0.2
      aws: 0.35
      gcp: 0.35
      azure: 0.35
    # 默认覆盖率
    coverRate: 0.7
    # 网络延迟评分阈值
    coverPingRanges:
      - { score: 100, range: [0, 30] }
      - { score: 90, range: [30, 60] }
      - { score: 80, range: [60, 120] }
      - { score: 70, range: [120, 200] }
      - { score: 60, range: [200, 300] }
      - { score: 50, range: [200, 400] }
      - { score: 40, range: [400, 500] }
      - { score: 30, range: [500, 1000] }
      - { score: 0, range: [1000, -1] }
    # idc价格阈值
    idcPriceRanges:
      - { score: 60, range: [0, 1] }
      - { score: 70, range: [1, 3] }
      - { score: 80, range: [3, 5] }
      - { score: 90, range: [5, 8] }
      - { score: 100, range: [8, -1] }
    # only support bkbase currently
    dataSourceType: bkbase
    # table names for data
    tableNames:
      # 省份到IDC每日均ping延迟
      # select thedate, bk_biz_id, country, province, idc_name, avg_ping from <latencyPingProvinceIdc>
      latencyPingProvinceIdc: latency_ping_province
      # 省份到IDC日均业务延迟数据
      # select thedate, country, province, cnt from <latencyBizProvinceIdc>
      latencyBizProvinceIdc: latency_biz_province
      # 用户国家分布表
      # select thedate, country, total from <userCountryDistribution>
      userCountryDistribution: supported_country
      # 用户省份分布表
      # select thedate, country, province, cnt from <userProvinceDistribution>
      userProvinceDistribution: supported_province
      # 推荐算法延迟数据源，如果留空默认使用 latencyPingProvinceIdc 所配置的数据源
      # select thedate, bk_biz_id, country, province, idc_name, avg_ping
      recommendDataSource:
    # bkbase 数据源配置
    bkBase:
      # 单次查询最大数量
      queryLimit: 10000
      # token for bkbase
      dataToken: token_here
      # endpoints is a seed list of host:port addresses of bkbase api gateway nodes.
      endpoints:
        - http://demo.com
      # appCode is the BlueKing app code of hcm to request bkbase api gateway.
      appCode: test
      # appSecret is the BlueKing app secret of hcm to request bkbase api gateway.
      appSecret: xxxxxxxxx
      # user is the BlueKing user of hcm to request bkbase api gateway.
      user: test
      # bkTicket is the BlueKing access ticket of hcm to request bkbase api gateway.
      bkTicket:
      # bkToken is the BlueKing access token of hcm to request bkbase api gateway.
      bkToken: xxxxxxxxx
      # defines tls related options.
      tls:
        # server should be accessed without verifying the TLS certificate.
        insecureSkipVerify:
        # server requires TLS client certificate authentication.
        certFile:
        # server requires TLS client certificate authentication.
        keyFile:
        # trusted root certificates for server.
        caFile:
        # the password to decrypt the certificate.
        password:


  ## pod配置
  ##
  replicas: 1
  podAnnotations: { }
  affinity: { }
  nodeSelector: { }
  tolerations: [ ]
  resources:
    limits:
      cpu: 200m
      memory: 1024Mi
    requests:
      memory: 512Mi
      cpu: 200m
  service:
    type: "ClusterIP"
    ports:
      - name: http
        protocol: TCP
        port: 80
        targetPort: 80
        nodePort:
  port: 80

dataservice:
  ## 镜像
  ##
  image:
    repository: blueking/bk-hcm-dataservice
    tag:
  ## 日志配置
  ##
  log:
    logDir: /data/hcm/logs
    maxPerFileSizeMB: 1024
    maxPerLineSizeKB: 2
    maxFileNum: 5
    logAppend: false
    toStdErr: false
    alsoToStdErr: true
    verbosity: 0
  ## pod配置
  ##
  replicas: 1
  podAnnotations: { }
  affinity: { }
  nodeSelector: { }
  tolerations: [ ]
  resources:
    limits:
      cpu: 200m
      memory: 1024Mi
    requests:
      memory: 512Mi
      cpu: 200m
  service:
    type: "ClusterIP"
    ports:
      - name: http
        protocol: TCP
        port: 80
        targetPort: 80
        nodePort:
  port: 80

hcservice:
  ## 镜像
  ##
  image:
    repository: blueking/bk-hcm-hcservice
    tag: 
  ## 日志配置
  ##
  log:
    logDir: /data/hcm/logs
    maxPerFileSizeMB: 1024
    maxPerLineSizeKB: 2
    maxFileNum: 5
    logAppend: false
    toStdErr: false
    alsoToStdErr: true
    verbosity: 0
  ## pod配置
  ##
  replicas: 1
  podAnnotations: { }
  affinity: { }
  nodeSelector: { }
  tolerations: [ ]
  resources:
    limits:
      cpu: 200m
      memory: 1024Mi
    requests:
      memory: 512Mi
      cpu: 200m
  service:
    type: "ClusterIP"
    ports:
      - name: http
        protocol: TCP
        port: 80
        targetPort: 80
        nodePort:
  port: 80

webserver:
  ## 镜像
  ##
  image:
    repository: blueking/bk-hcm-webserver
    tag:
  ## 日志配置
  ##
  log:
    logDir: /data/hcm/logs
    maxPerFileSizeMB: 1024
    maxPerLineSizeKB: 2
    maxFileNum: 5
    logAppend: false
    toStdErr: false
    alsoToStdErr: true
    verbosity: 0
  ## pod配置
  ##
  replicas: 1
  podAnnotations: { }
  affinity: { }
  nodeSelector: { }
  tolerations: [ ]
  resources:
    limits:
      cpu: 200m
      memory: 1024Mi
    requests:
      memory: 512Mi
      cpu: 200m
  service:
    type: "ClusterIP"
    ports:
      - name: http
        protocol: TCP
        port: 80
        targetPort: 80
        nodePort:
  ## Pod对应提供服务的port 与service里的targetPort必须一致
  port: 80
  changeLogPath:
    ch: /data/hcm/changelog/ch
    en: /data/hcm/changelog/en
  # defines notice related settings.
  notice:
    # enable is a flag to enable notice service.如果需要启用消息通知，需要申请bk-notice的api网关权限
    enable: false
    # endpoints is a seed list of host:port addresses of notice api gateway nodes.
    endpoints:
      - http://demo.com
    # appCode is the BlueKing app code of hcm to request notice api gateway.
    appCode: bk-hcm
    # appSecret is the BlueKing app secret of hcm to request notice api gateway.
    appSecret: xxxxxxxxx
    # user is the BlueKing user of hcm to request notice api gateway.
    user: bk-hcm
    # bkTicket is the BlueKing access ticket of hcm to request notice api gateway.
    bkTicket:
    # bkToken is the BlueKing access token of hcm to request notice api gateway.
    bkToken: xxxxxxxxx
    # defines tls related options.
    tls:
      # server should be accessed without verifying the TLS certificate.
      insecureSkipVerify:
      # server requires TLS client certificate authentication.
      certFile:
      # server requires TLS client certificate authentication.
      keyFile:
      # trusted root certificates for server.
      caFile:
      # the password to decrypt the certificate.
      password:

taskserver:
  ## 镜像
  ##
  image:
    repository: blueking/bk-hcm-taskserver
    tag:
  ## 日志配置
  ##
  log:
    logDir: /data/hcm/logs
    maxPerFileSizeMB: 1024
    maxPerLineSizeKB: 2
    maxFileNum: 5
    logAppend: false
    toStdErr: false
    alsoToStdErr: true
    verbosity: 0
  ## pod配置
  ##
  replicas: 1
  podAnnotations: {}
  affinity: {}
  nodeSelector: {}
  tolerations: []
  resources:
    limits:
      cpu: 200m
      memory: 1024Mi
    requests:
      memory: 512Mi
      cpu: 200m
  service:
    type: "ClusterIP"
    ports:
      - name: http
        protocol: TCP
        port: 80
        targetPort: 80
        nodePort:
  port: 80
  # defines async's related configuration.
  async:
    # scheduler 公共组件，负责获取分配给当前节点的任务流，并解析成任务树后，派发当前要执行的任务给executor执行
    scheduler:
      # watchIntervalSec 查看是否有分配给当前节点处于Scheduled状态任务的周期
      watchIntervalSec: 1
      # workerNumber 负责解析当前节点的子节点，并派发子节点任务到executor执行的协程数量
      workerNumber: 5
    # executor 公共组件，负责执行异步任务
    executor:
      # workerNumber 负责处理异步任务的协程数量
      workerNumber: 5
      # taskExecTimeoutSec 异步任务执行超时时间，是整个异步任务执行流程的总时间，包括运行、回滚、重试。
      taskExecTimeoutSec: 120
    # dispatcher 主节点组件，负责派发任务
    dispatcher:
      # watchIntervalSec 查看是否有Pending状态任务的周期
      watchIntervalSec: 1
    # watchDog 主节点组件，负责异常任务修正（超时任务，任务处理节点已经挂掉的任务等）
    watchDog:
      # watchIntervalSec 查看是否有异常任务的周期
      watchIntervalSec: 1
      # taskTimeoutSec 判断任务执行超时时间
      taskTimeoutSec: 300

accountserver:
  ## 镜像
  ##
  image:
    repository: blueking/bk-hcm-accountserver
    tag:
  ## 日志配置
  ##
  log:
    alsoToStdErr: true
    logDir: /data/hcm/logs
    maxPerFileSizeMB: 1024
    maxPerLineSizeKB: 2
    maxFileNum: 5
    logAppend: false
    toStdErr: false
    verbosity: 0
  # bill controller
  controller:
    # 关闭账单拉取
    disable: false
    controllerSyncDuration:
    mainAccountSummarySyncDuration:
    rootAccountSummarySyncDuration:
    dailySummarySyncDuration:

  billAllocation:
    # aws savings plans allocation option
    awsSavingsPlans:
    #    - rootAccountCloudId: xxx
    #      SpPurchaseAccountCloudID: xxx
    #      spArnPrefix: arn:aws:savingsplans::xxxxx:savingsplan/
    awsCommonExpense:
      excludeAccountCloudIds:
      #  - 123456789
    gcpCredits:
    #- rootAccountCloudID: gcp_support_account
    #  returnConfigs:
    #    - creditId: "some_credit_id"
    #      creditName: "some_note"
    #      accountCloudID: "gcp_credit_account"
    gcpCommonExpense:
      excludeAccountCloudIDs:
      # - "account_do_not_share_common_expense"



  ## pod配置
  ##
  replicas: 1
  podAnnotations: { }
  affinity: { }
  nodeSelector: { }
  tolerations: [ ]
  resources:
    limits:
      cpu: 200m
      memory: 1024Mi
    requests:
      memory: 512Mi
      cpu: 200m
  service:
    type: "ClusterIP"
    ports:
      - name: http
        protocol: TCP
        port: 80
        targetPort: 80
        nodePort:
  port: 80

## appCode
appCode: bk-hcm
## appSecret
appSecret: ""
## @param bkIamApiUrl bk-iam backend url
##
bkIamApiUrl: http://bkiam-web
## @param bkComponentApiUrl esb url
##
bkComponentApiUrl: http://bkapi.paas.example.com
## 蓝鲸 Login url（浏览器跳转登录用的URL前缀）
bkLoginUrl: http://example.com/login
## 蓝鲸 Login 校验的登录票据名称
bkLoginCookieName: ""
# ITSM 地址
bkItsmUrl: http://itsm.bk.com
# HCM 地址
bkHCMUrl: http://hcm.bk.com
# 中英文持久化设置cookie使用，一般设置为 .域名
bkDomain: .bk.com
# 蓝鲸配置平台创建业务页面跳转链接
bkCmdbCreateBizUrl: "http://cmdb.bk.com/create_biz"
# 蓝鲸配置平台创建业务文档跳转链接
bkCmdbCreateBizDocsUrl: "http://cmdb.bk.com/docs"
# 是否启用云选型
enableCloudSelection: true
# 是否启用账单账号功能
enableAccountBill: true

## 加密配置，Note: 首次部署后不可修改，否则数据将无法解密
##
crypto:
  ## Aes Gcm algorithm
  ##
  aesGcm:
    ## aes secret key, length should be 16 or 32 bytes
    ##
    key:
    ## gcm nonce, length should be 12 bytes
    ##
    nonce:

## APIGateway Sync
apigwSync:
  enabled: true
  image:
    repository: blueking/bk-hcm-apigwsync
    tag: 1.0.2
  ## 需注册的网关名
  apigwName: "bk-hcm"
  ## 蓝鲸 APIGateway url模板
  bkApiUrlTmpl: "http://bkapi.example.com/api/{api_name}"
  ## 网关负责人，多个使用英文逗号分隔
  bkApigwManagers: "admin"
  ## Pod
  resources:
    limits:
      cpu: 200m
      memory: 1024Mi
    requests:
      memory: 512Mi
      cpu: 200m

## Migrate DB
migration:
  enabled: true

## Common Images
k8sWaitFor:
  repository: groundnuty/k8s-wait-for
  tag: v1.5.1
  resources:
    limits:
      cpu: 1000m
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 256Mi
busyBox:
  repository: library/busybox
  tag: 1.34.0
  resources:
    limits:
      cpu: 1000m
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 256Mi

## 内置MySQL
##
mariadb:
  image:
    registry: docker.io
    repository: bitnami/mariadb
    tag: 10.6.12-debian-11-r9
  enabled: true
  architecture: standalone
  auth:
    rootPassword: ""
    database: hcm
    username: hcm
    password: "admin"
  primary:
    persistence:
      enabled: true
      storageClass:
      accessModes:
        - ReadWriteOnce
      size: 10Gi

externalDatabase:
  host: localhost
  port: 3306
  user: hcm
  password: ""
  database: hcm

dbConnConfig:
  dialTimeoutSec: 60
  readTimeoutSec: 60
  writeTimeoutSec: 30
  maxIdleTimeoutMin: 10
  maxOpenConn: 500
  maxIdleConn: 100
  limiterQps: 500
  limiterBurst: 500
## 内置Etcd
##
etcd:
  image:
    registry: docker.io
    repository: bitnami/etcd
    tag: 3.5.4-debian-11-r36

  enabled: true
  ## 使用username/password方式，不使用TLS
  ##
  auth:
    rbac:
      create: true
      allowNoneAuthentication: false
      rootPassword: "admin"
    token:
      type: simple
  ## 只是作为微服务的服务发现，无需持久化
  ##
  persistence:
    enabled: false

externalEtcd:
  ## ETCD 配置
  ## 地址
  ##
  host: "etcd.example.com"
  ## 端口
  ##
  port: 2379
  ## 基础认证
  ##
  username: ""
  password: ""
  ## ETCD Client 证书配置
  ##
  tls:
    ## ETCD Client 证书 CA
    ##
    caBase64Encoded: ""
    ## ETCD Client 证书 Cert
    ##
    certBase64Encoded: ""
    ## ETCD Client 证书 KEY
    ##
    keyBase64Encoded: ""
    ## 已存在证书
    ##
    existingSecret: ""
    insecureSkipVerify: true
    caCertFileName: "ca.crt"
    certFileName: "tls.crt"
    keyFileName: "tls.key"

# bkLogConfig 蓝鲸日志采集配置
bkLogConfig:
  # 文件日志采集
  file:
    # 开关
    enabled: true
    # 数据源ID
    dataId: 1
  # 标准输出采集
  std:
    # 开关
    enabled: true
    # 数据源ID
    dataId: 1

# bkServiceMonitor 蓝鲸监控配置
serviceMonitor:
  # 开关
  enabled: true
  # 采集频率
  interval: "15s"
  # 采集路径
  path: "/metrics"
  # 监控指标添加的label
  metricRelabelings:
    - action: replace
      replacement: bk-hcm
      targetLabel: bk_app_code
    - action: replace
      replacement: hcm.blueking.com
      targetLabel: bk_domain

# defines itsm related settings.
itsm:
  # endpoints is a seed list of host:port addresses of itsm api gateway nodes.
  endpoints:
    - http://demo.com
  # appCode is the BlueKing app code of hcm to request itsm api gateway.
  appCode: test
  # appSecret is the BlueKing app secret of hcm to request itsm api gateway.
  appSecret: xxxxxxxxx
  # user is the BlueKing user of hcm to request itsm api gateway.
  user: test
  # bkTicket is the BlueKing access ticket of hcm to request itsm api gateway.
  bkTicket:
  # bkToken is the BlueKing access token of hcm to request itsm api gateway.
  bkToken: xxxxxxxxx
  # defines tls related options.
  tls:
    # server should be accessed without verifying the TLS certificate.
    insecureSkipVerify:
    # server requires TLS client certificate authentication.
    certFile:
    # server requires TLS client certificate authentication.
    keyFile:
    # trusted root certificates for server.
    caFile:
    # the password to decrypt the certificate.
    password:

# defines cmsi related settings.
cmsi:
  cc:
    - manager1@example.com
    - manager2@example.com
  sender: hcm@example.com
  # endpoints is a seed list of host:port addresses of finops api gateway nodes.
  endpoints:
    - http://demo.com
  # appCode is the BlueKing app code of hcm to request finops api gateway.
  appCode: bk-hcm
  # appSecret is the BlueKing app secret of hcm to request finops api gateway.
  appSecret: xxxxxxxxx
  # user is the BlueKing user of hcm to request finops api gateway.
  user: bk-hcm
  # bkTicket is the BlueKing access ticket of hcm to request finops api gateway.
  bkTicket:
  # bkToken is the BlueKing access token of hcm to request finops api gateway.
  bkToken: xxxxxxxxx
  # defines tls related options.
  tls:
    # server should be accessed without verifying the TLS certificate.
    insecureSkipVerify:
    # server requires TLS client certificate authentication.
    certFile:
    # server requires TLS client certificate authentication.
    keyFile:
    # trusted root certificates for server.
    caFile:
    # the password to decrypt the certificate.
    password:

# object store
objectstore:
  type:
  uin:
  prefix:
  secretId:
  secretKey:
  bucketUrl:
  bucketName:
  bucketRegion:
  isDebug:

tmpFileDir: /tmp
